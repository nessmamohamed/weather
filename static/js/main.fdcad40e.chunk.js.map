{"version":3,"sources":["background/weather20.jpg","component/form.js","component/weatherForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","form","className","onSubmit","this","props","type","id","placeholder","name","onChange","onChangeCity","onChangeCountry","error","React","Component","weatherForm","loadweather","lat","lon","max","min","style","position","maxWidth","city","icon","main","celsuis","temp_max","temp_min","description","App","state","undefined","country","let","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","getWeather","a","async","city2","API_KEY","link","fetch","getData","json","response","range","weather","weatherIconSwitch","setState","cal","temp","Math","floor","rangeId","e","target","value","preventDefault","isGeolocationAvailable","isGeolocationEnabled","coords","src","backWeather","alt","latitude","longitude","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,uC,8LCEtBC,G,uLAKb,OACI,6BACI,yBAAKC,UAAW,aAEZ,0BAAMC,SAAWC,KAAKC,MAAMF,UACxB,yBAAKD,UAAY,8BACd,yBAAKA,UAAY,0BACb,2BAAOI,KAAM,OAAOJ,UAAU,eAAeK,GAAK,OAAOC,YAAY,kBACpEC,KAAO,QACPC,SAAYN,KAAKC,MAAMM,gBAE5B,yBAAKT,UAAY,2BACb,2BAAOI,KAAM,OAAOJ,UAAU,gBAAgBK,GAAK,OAAOC,YAAY,iBACrEC,KAAO,UACPC,SAAYN,KAAKC,MAAMO,mBAE5B,yBAAKV,UAAY,mDACjB,4BAAQI,KAAM,SAASJ,UAAW,yBAAyBK,GAAG,UAA9D,iBAIFH,KAAKC,MAAMQ,MAChB,yBAAKX,UAAU,iDAAf,6BAAgG,Y,GA3BlFY,IAAMC,YCAnBC,E,4LAEfZ,KAAKC,MAAMY,YAAYb,KAAKC,MAAMa,IAAKd,KAAKC,MAAMc,O,+BAKlD,IAAmBC,EAAKC,EAQtB,OACI,6BACC,yBAAKnB,UAAU,kCAAkCoB,MAAO,CAACC,SAAU,WAAaC,SAAU,QAE1F,yBAAKtB,UAAU,8BAA8BK,GAAG,QAEhD,wBAAIL,UAAU,QAAd,IAAuBE,KAAKC,MAAMoB,MAElC,uBAAIvB,UAAcE,KAAKC,MAAMqB,KAAO,oBAEpC,wBAAIxB,UAAU,SAASE,KAAKC,MAAMsB,MAElC,4BAAKvB,KAAKC,MAAMuB,QAAhB,SApBYR,EAsBFhB,KAAKC,MAAMwB,SAtBJR,EAsBcjB,KAAKC,MAAMyB,SApB7C,wBAAI5B,UAAW,SACb,0BAAMA,UAAW,QAAQkB,EAAzB,QACA,0BAAMlB,UAAW,UAAUmB,EAA3B,UAoBC,wBAAInB,UAAY,QAAQE,KAAKC,MAAM0B,oB,GA/BPjB,IAAMC,W,uCCUxCiB,E,2MAEJC,MAAQ,CACPR,UAAOS,EACPC,aAASD,EACTR,KAAO,GACPC,KAAM,GACNI,YAAa,GACbF,cAAUK,EACVJ,cAAUI,EACVN,aAAUM,EACVE,SAAKF,EACLf,SAAKe,EACLrB,OAAO,G,EAGRwB,YAAc,CACZC,aAAe,qBACfC,QAAS,cACTC,KAAM,sBACNC,KAAM,aACNC,WAAY,YACZC,MAAO,kBACPC,OAAQ,iB,EAKVC,WAAa,SAAO3B,EAAKC,GAAZ,2BAAA2B,EAAAC,OAAA,uDACNtB,EAAO,EAAKQ,MAAMe,MAClBb,EAAU,EAAKF,MAAME,QAErBc,EAAU,mCAEVC,EAAOzB,GAAQU,EAAR,4DACwCV,EADxC,YACgDU,EADhD,kBACiEc,GADjE,8DAE0C/B,EAF1C,gBAEqDC,EAFrD,kBAEkE8B,GARnE,oBAAAH,EAAA,MAUUK,MAAMD,IAVhB,cAUNE,EAVM,mBAAAN,EAAA,MAWWM,EAAQC,QAXnB,QAWNC,EAXM,OAcRC,EAAQD,EAASE,QAAQ,GAAGjD,GAEhC,EAAKkD,kBAAkBF,GAGrB,EAAKG,SAAS,CACbjC,KAAO6B,EAAS7C,KAChBkB,KAAM2B,EAASE,QAAQ,GAAG7B,KAC1BI,YAAauB,EAASE,QAAQ,GAAGzB,YACjCF,SAAU,EAAK8B,IAAIL,EAAS3B,KAAKE,UACjCC,SAAU,EAAK6B,IAAIL,EAAS3B,KAAKG,UACjCF,QAAU,EAAK+B,IAAIL,EAAS3B,KAAKiC,MACjC/C,OAAO,IA1BE,kDA4BR,EAAK6C,SAAS,CACZ7C,MAAO,eA7BD,0D,EAmCZ8C,IAAM,SAACC,GAEL,OADUC,KAAKC,MAAMF,EAAO,S,EAK9BH,kBAAoB,SAACM,GAEnB,QAAQ,GACN,KAAKA,GAAW,KAAOA,GAAW,IAChC,EAAKL,SAAS,CAAEhC,KAAM,EAAKW,YAAYC,eACvC,MACF,KAAKyB,GAAW,KAAOA,GAAW,IAChC,EAAKL,SAAS,CAAEhC,KAAM,EAAKW,YAAYE,UACvC,MACF,KAAKwB,GAAW,KAAOA,GAAW,IAChC,EAAKL,SAAS,CAAEhC,KAAM,EAAKW,YAAYG,OACvC,MACF,KAAKuB,GAAW,KAAOA,GAAW,IAChC,EAAKL,SAAS,CAAEhC,KAAM,EAAKW,YAAYI,OACvC,MACF,KAAKsB,GAAW,KAAOA,GAAW,IAChC,EAAKL,SAAS,CAAEhC,KAAM,EAAKW,YAAYK,aACvC,MACF,KAAiB,MAAZqB,EACH,EAAKL,SAAS,CAAEhC,KAAM,EAAKW,YAAYM,QACvC,MACF,KAAKoB,GAAW,KAAOA,GAAW,IAChC,EAAKL,SAAS,CAAChC,KAAM,EAAKW,YAAYO,W,EAQ5CjC,aAAc,SAACqD,GACb,EAAKN,SAAL,eACIM,EAAEC,OAAOxD,KAAQuD,EAAEC,OAAOC,S,EAKhCtD,gBAAkB,SAACoD,GACjB,EAAKN,SAAL,eACGM,EAAEC,OAAOxD,KAAQuD,EAAEC,OAAOC,S,EAK/B/D,SAAW,SAAC6D,GACXA,EAAEG,iBAEF,EAAKtB,c,wEAKN,OAAQzC,KAAKC,MAAM+D,uBAEXhE,KAAKC,MAAMgE,qBAEbjE,KAAKC,MAAMiE,OACf,yBAAKpE,UAAU,OAEb,6BAEI,yBAAKqE,IAAKC,IAAaC,IAAI,MAAMvE,UAAY,QAE7C,kBAAC,EAAD,CAAMS,aAAgBP,KAAKO,aACrBC,gBAAmBR,KAAKQ,gBACxBT,SAAYC,KAAKD,SACjBU,MAAST,KAAK6B,MAAMpB,QAE1B,kBAAC,EAAD,CAAaI,YAAeb,KAAKyC,WACpB3B,IAAOd,KAAKC,MAAMiE,OAAOI,SACzBvD,IAAOf,KAAKC,MAAMiE,OAAOK,UACzBlD,KAAOrB,KAAK6B,MAAMR,KAClBC,KAAQtB,KAAK6B,MAAMP,KACnBC,KAAQvB,KAAK6B,MAAMN,KACnBC,QAAWxB,KAAK6B,MAAML,QACtBG,YAAe3B,KAAK6B,MAAMF,YAC1BF,SAAYzB,KAAK6B,MAAMJ,SACvBC,SAAY1B,KAAK6B,MAAMH,aAQ1C,iEA9BA,2DAFA,6E,GA1HahB,IAAMC,WA+JV6D,uBAAY,CACzBC,gBAAiB,CACbC,oBAAoB,GAExBC,oBAAqB,KAJRH,CAKZ5C,GCpKiBgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fdcad40e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather20.1f65df40.jpg\";","import React from 'react'\r\n\r\nexport default class form extends React.Component{\r\n   \r\n  \r\n    render(){\r\n\r\n        return(\r\n            <div >\r\n                <div className ='container'>\r\n                   \r\n                    <form onSubmit ={this.props.onSubmit} >\r\n                        <div className = 'row py-3 pt-5 mx-md-0 mx-5'>\r\n                           <div className = ' col-md-3 offset-md-2 '>\r\n                               <input type= 'text' className='form-control' id = 'form' placeholder='city ex: london'\r\n                                name = 'city2'\r\n                                onChange = {this.props.onChangeCity}/>\r\n                           </div>\r\n                           <div className = ' col-md-3 mt-md-0 mt-2 '>\r\n                               <input type= 'text' className='form-control ' id = 'form' placeholder='country ex: uk'\r\n                                name = 'country'\r\n                                onChange = {this.props.onChangeCountry}/>\r\n                           </div>\r\n                           <div className = 'col-md-3  mt-md-0 mt-3 text-md-left text-center'>\r\n                           <button type= 'submit' className= 'btn btn-lg btn-danger ' id='btn-lg'>get weather</button>\r\n                           </div>\r\n                           \r\n                        </div>\r\n                        {this.props.error ? \r\n                    <div className='alert alert-danger text-center mx-5 mb-0 py-1'>please enter a valid data</div>: null}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class weatherForm extends React.Component {\r\n    componentDidMount(){\r\n      this.props.loadweather(this.props.lat, this.props.lon)\r\n    }\r\n    render(){\r\n     \r\n        // get max and min deg\r\n      const maxAndmin = (max, min) =>{\r\n        return ( \r\n          <h3 className= 'py-4 '>\r\n            <span className= 'mx-3'>{max}&deg;</span>\r\n            <span className= ' mx-3 '>{min}&deg;</span>\r\n          </h3>\r\n        )\r\n      }\r\n        return(\r\n            <div >\r\n             <div className='container py-4 text-center px-0' style={{position: 'relative' , maxWidth: '70%'}}>\r\n             \r\n             <div className='card py-4 mx-0 px-3 mx-md-5' id='card'>\r\n                \r\n             <h2 className='pt-4'> {this.props.city}</h2>\r\n           \r\n             <i  className = { this.props.icon + ' display-1 py-4'}></i>\r\n             \r\n             <h3 className='py-3 '>{this.props.main}</h3>\r\n \r\n             <h3>{this.props.celsuis}&deg;</h3>\r\n \r\n            {maxAndmin(this.props.temp_max, this.props.temp_min)}  \r\n \r\n             <h3 className = 'mb-5'>{this.props.description}</h3> \r\n             </div>\r\n \r\n             </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n\nimport Form from './component/form'\nimport WeatherForm from './component/weatherForm'\n\nimport backWeather from './background/weather20.jpg'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'weather-icons/css/weather-icons.css'\n\nimport {geolocated} from 'react-geolocated'\n\n class App extends React.Component {\n \n   state = {\n    city : undefined, \n    country: undefined,\n    icon : '',\n    main: '',\n    description: '',\n    temp_max: undefined,\n    temp_min: undefined,\n    celsuis : undefined,\n    let: undefined, \n    lon: undefined,\n    error: false\n   }\n\n   weatherIcon = {\n     Thunderstorm : 'wi wi-thunderstorm',\n     Drizzle: 'wi wi-sleet',\n     Rain: 'wi wi-storm-showers', \n     Snow: 'wi wi-snow',\n     Atmosphere: 'wi wi-fog',\n     Clear: 'wi wi-day-sunny',\n     Clouds: 'wi wi-day-fog'\n   }\n\n\n   // get weather\n   getWeather = async (lat, lon ) => {\n      let city = this.state.city2\n      let country = this.state.country\n     // api key\n    const API_KEY = '6d0fec3c5fc17973eaea1228813668c1'\n      // link \n    const link = city && country ? \n    `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}` :\n    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`\n     try{\n    const getData = await fetch(link);\n    const response = await getData.json()\n\n    // get range id \n    let range = response.weather[0].id\n    // set icon\n    this.weatherIconSwitch(range)\n    \n    // set weather\n      this.setState({\n       city : response.name,\n       main: response.weather[0].main,\n       description: response.weather[0].description,\n       temp_max: this.cal(response.main.temp_max),\n       temp_min: this.cal(response.main.temp_min),\n       celsuis : this.cal(response.main.temp), \n       error: false\n      }) }catch(e){\n        this.setState({\n          error: 'data error'\n        })\n      }   \n   }\n\n     // calculate temp\n    cal = (temp) =>{\n      var cal = Math.floor(temp - 273.15)\n      return cal\n    }\n\n    // switch weather icon\n    weatherIconSwitch = (rangeId) => {  \n      // SWITCH ICONS\n      switch (true){\n        case rangeId >= 200 && rangeId <= 232:\n          this.setState({ icon: this.weatherIcon.Thunderstorm})\n          break;\n        case rangeId >= 300 && rangeId <= 321:\n          this.setState({ icon: this.weatherIcon.Drizzle})\n          break;\n        case rangeId >= 500 && rangeId <= 531:\n          this.setState({ icon: this.weatherIcon.Rain})  \n          break;\n        case rangeId >= 600 && rangeId <= 622:\n          this.setState({ icon: this.weatherIcon.Snow})\n          break;\n        case rangeId >= 701 && rangeId <= 781:\n          this.setState({ icon: this.weatherIcon.Atmosphere})\n          break;\n        case rangeId === 800:\n          this.setState({ icon: this.weatherIcon.Clear})\n          break;\n        case rangeId >= 801 && rangeId <= 804:\n          this.setState({icon: this.weatherIcon.Clouds})  \n          break;\n          default:  \n      }\n      \n    }\n\n    // get city \n    onChangeCity =(e)=>{\n      this.setState({\n         [e.target.name] : e.target.value\n      })\n    }\n\n    // get country \n    onChangeCountry = (e)=>{\n      this.setState({\n        [e.target.name] : e.target.value\n      })\n    }\n    \n    // on submit\n    onSubmit = (e) =>{\n     e.preventDefault()\n     \n     this.getWeather()\n    }\n    \n  render(){\n      \n    return !this.props.isGeolocationAvailable ? (\n      <div>your browser doesn't support geolocation</div>\n       ) : !this.props.isGeolocationEnabled ? (\n      <div>Geolocation is not Enabled</div>\n       ): this.props.coords ? (\n      <div className=\"App\">\n\n        <div>\n\n            <img src={backWeather} alt='img' className = 'img' ></img>\n             \n            <Form onChangeCity = {this.onChangeCity}\n                  onChangeCountry = {this.onChangeCountry}\n                  onSubmit = {this.onSubmit} \n                  error = {this.state.error}/>\n\n            <WeatherForm loadweather = {this.getWeather}\n                         lat = {this.props.coords.latitude}\n                         lon = {this.props.coords.longitude}\n                         city= {this.state.city} \n                         icon = {this.state.icon}\n                         main = {this.state.main}\n                         celsuis = {this.state.celsuis}\n                         description = {this.state.description}\n                         temp_max = {this.state.temp_max}\n                         temp_min = {this.state.temp_min}/>\n              \n           \n\n        </div>\n         \n      </div>\n    ) : (\n      <div>Getting the location data&hellip; </div>\n    )\n  }\n}\n\nexport default geolocated ({\n  positionOptions: {\n      enableHighAccuracy: false,\n  },\n  userDecisionTimeout: 5000,\n})(App)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}